# Copyright 2020 The Dawn Authors
# Copyright 2021 The WebNN-native Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//third_party/dawn/scripts/dawn_overrides_with_defaults.gni")

import("//build_overrides/build.gni")
import("${dawn_root}/scripts/dawn_component.gni")
import("${dawn_root}/scripts/dawn_features.gni")
import("${webnn_root}/build_overrides/webnn_features.gni")
import("${webnn_root}/generator/webnn_generator.gni")

# Import mac_min_system_version
if (is_mac) {
  if (dawn_has_build) {
    import("//build/config/mac/mac_sdk.gni")
  } else {
    mac_min_system_version = "10.11.0"
  }
}

config("webnn_native_internal") {
  configs = [ "${webnn_root}/src/common:dawn_internal" ]

  # Suppress warnings that Metal isn't in the deployment target of Chrome:
  # initialization of the Metal backend is behind a IsMetalSupported check so
  # Dawn won't call Metal functions on macOS 10.10.
  # At the time this is written Chromium supports 10.10.0 and above, so if we
  # aren't on 10.11 it means we are on 10.11 and above, and Metal is available.
  # Skipping this check on 10.11 and above is important as it allows getting
  # proper compilation warning when using 10.12 and above feature for example.
  # TODO(cwallez@chromium.org): Consider using API_AVAILABLE annotations on all
  # metal code in dawn once crbug.com/1004024 is sorted out if Chromium still
  # supports 10.10 then.
  if (is_mac && mac_min_system_version == "10.10.0") {
    cflags_objcc = [ "-Wno-unguarded-availability" ]
  }
}

webnn_json_generator("webnn_native_utils_gen") {
  target = "webnn_native_utils"
  outputs = [
    "src/webnn_native/ProcTable.cpp",
    "src/webnn_native/webnn_structs_autogen.h",
    "src/webnn_native/webnn_structs_autogen.cpp",
    "src/webnn_native/ValidationUtils_autogen.h",
    "src/webnn_native/ValidationUtils_autogen.cpp",
  ]
}

# Public webnn_native headers so they can be publicly visible for
# dependencies of webnn_native
source_set("webnn_native_headers") {
  public_deps = [ "${webnn_root}/src/webnn:webnncpp_headers" ]
  all_dependent_configs =
      [ "${webnn_root}/src/common:dawn_public_include_dirs" ]
  sources = [
    "${webnn_root}/src/include/webnn_native/WebnnNative.h",
    "${webnn_root}/src/include/webnn_native/webnn_native_export.h",
  ]
}

# The meat of the compilation for webnn_native so that we can cheaply have
# shared_library / static_library versions of it. It compiles all the files
# except those that define exported symbols.
source_set("webnn_native_sources") {
  deps = [
    ":webnn_native_headers",
    ":webnn_native_utils_gen",
    "${webnn_root}/src/common",
  ]
  defines = []
  libs = []
  data_deps = []

  configs += [ ":webnn_native_internal" ]

  sources = get_target_outputs(":webnn_native_utils_gen")

  sources += [
    "Context.cpp",
    "Context.h",
    "Error.cpp",
    "Error.h",
    "ErrorData.cpp",
    "ErrorData.h",
    "ErrorScope.cpp",
    "ErrorScope.h",
    "Graph.cpp",
    "Graph.h",
    "GraphBuilder.cpp",
    "GraphBuilder.h",
    "NamedInputs.h",
    "NamedOutputs.h",
    "NamedRecords.h",
    "NamedResults.h",
    "ObjectBase.cpp",
    "ObjectBase.h",
    "Operand.cpp",
    "Operand.h",
    "Result.cpp",
    "Result.h",
  ]

  sources += [
    "ops/BatchNorm.cpp",
    "ops/BatchNorm.h",
    "ops/Binary.cpp",
    "ops/Binary.h",
    "ops/Clamp.cpp",
    "ops/Clamp.h",
    "ops/Concat.cpp",
    "ops/Concat.h",
    "ops/Constant.cpp",
    "ops/Constant.h",
    "ops/Conv2d.cpp",
    "ops/Conv2d.h",
    "ops/Gemm.cpp",
    "ops/Gemm.h",
    "ops/Input.cpp",
    "ops/Input.h",
    "ops/InstanceNorm.cpp",
    "ops/InstanceNorm.h",
    "ops/LeakyRelu.cpp",
    "ops/LeakyRelu.h",
    "ops/Pad.cpp",
    "ops/Pad.h",
    "ops/Pool2d.cpp",
    "ops/Pool2d.h",
    "ops/ReduceMean.cpp",
    "ops/ReduceMean.h",
    "ops/Reshape.cpp",
    "ops/Reshape.h",
    "ops/Transpose.cpp",
    "ops/Transpose.h",
    "ops/Unary.cpp",
    "ops/Unary.h",
  ]

  if (webnn_enable_null) {
    sources += [
      "null/ContextNull.cpp",
      "null/ContextNull.h",
    ]
  }

  if (webnn_enable_openvino) {
    sources += [
      "openvino/ContextIE.cpp",
      "openvino/ContextIE.h",
      "openvino/ErrorIE.cpp",
      "openvino/ErrorIE.h",
      "openvino/GraphIE.cpp",
      "openvino/GraphIE.h",
    ]

    include_dirs = [ "//third_party/openvino/ienn/src" ]

    deps += [ ":build_ienn_binary" ]

    if (is_win) {
      lib_dirs = [ "//third_party/openvino/ienn/build/intel64/Release/" ]
      libs = [ "ie_nn_c_api.lib" ]
    }

    if (is_linux) {
      lib_dirs = [ "//third_party/openvino/ienn/build/intel64/Release/lib" ]
      libs = [ "ie_nn_c_api" ]

      assert(
          is_component_build == false,
          "`is_component_build=false` must be set for OpenVINO backend on Linux.")
    }
  }

  if (webnn_enable_dml) {
    sources += [
      "dml/deps/src/device.cpp",
      "dml/deps/src/device.h",
      "dml/deps/src/model.h",
      "dml/deps/src/precomp.h",
      "dml/deps/src/typeconvert.h",
      "dml/deps/src/util.cpp",
      "dml/deps/src/util.h",
    ]

    sources += [
      "dml/ContextDML.cpp",
      "dml/ContextDML.h",
      "dml/GraphDML.cpp",
      "dml/GraphDML.h",
    ]

    include_dirs = [
      "//third_party/DirectML/Libraries",
      "//third_party/microsoft.ai.directml.1.5.1/include",
    ]

    lib_dirs = [ "//third_party/microsoft.ai.directml.1.5.1/bin/x64-win" ]

    libs = [
      "dxgi.lib",
      "d3d12.lib",
      "directml.lib",
    ]

    cflags = [
      "/std:c++17",
      "-Wno-address-of-temporary",
      "-Wno-logical-not-parentheses",
      "-Wno-macro-redefined",
    ]
  }

  if (webnn_enable_onednn) {
    sources += [
      "onednn/ContextDNNL.cpp",
      "onednn/ContextDNNL.h",
      "onednn/GraphDNNL.cpp",
      "onednn/GraphDNNL.h",
    ]

    include_dirs = [
      "//third_party/oneDNN/include",
      "//third_party/oneDNN/build/include",
    ]

    if (is_win) {
      if (is_debug) {
        lib_dirs = [ "//third_party/oneDNN/build/src/Debug" ]
      } else {
        lib_dirs = [ "//third_party/oneDNN/build/src/Release" ]
      }
      libs = [ "dnnl.lib" ]
    }

    if (is_linux) {
      lib_dirs = [ "//third_party/oneDNN/build/src" ]
      libs = [ "dnnl" ]
    }
  }

  if (webnn_enable_xnnpack) {
    sources += [
      "xnnpack/ContextXNN.cpp",
      "xnnpack/ContextXNN.h",
      "xnnpack/GraphXNN.cpp",
      "xnnpack/GraphXNN.h",
    ]

    include_dirs = [
      "//third_party/XNNPACK/include",
      "//third_party/XNNPACK/build/local/pthreadpool-source/include",
    ]

    libprefix = ""
    libext = ""
    libfolder = ""

    if (is_win) {
      libext = "lib"
      if (is_debug) {
        libfolder = "Debug"
      } else {
        libfolder = "Release"
      }
    }

    if (is_linux) {
      libprefix = "lib"
      libext = "a"
    }

    libs = [
      "//third_party/XNNPACK/build/local/${libfolder}/${libprefix}XNNPACK.${libext}",
      "//third_party/XNNPACK/build/local/clog/${libfolder}/${libprefix}clog.${libext}",
      "//third_party/XNNPACK/build/local/cpuinfo/${libfolder}/${libprefix}cpuinfo.${libext}",
      "//third_party/XNNPACK/build/local/pthreadpool/${libfolder}/${libprefix}pthreadpool.${libext}",
    ]
  }
}

# The static and shared libraries for webnn_native. Most of the files are
# already compiled in webnn_native_sources, but we still need to compile
# files defining exported symbols.
dawn_component("webnn_native") {
  DEFINE_PREFIX = "WEBNN_NATIVE"

  #Make headers publically visible
  public_deps = [ ":webnn_native_headers" ]

  deps = [
    ":webnn_native_sources",
    "${webnn_root}/src/common",
  ]
  sources = [ "WebnnNative.cpp" ]
  configs = [ ":webnn_native_internal" ]
  defines = [
    "WEBNN_NATIVE_SHARED_LIBRARY",
    "WEBNN_NATIVE_IMPLEMENTATION",
  ]
}

# An action that build ienn binary that is a c wrapper of nGraph.
action("build_ienn_binary") {
  script = "//third_party/openvino/ienn/build_ienn.py"

  args = [
    "--webnn-native-lib-path",
    "$root_out_dir/{{source_file_part}}",
  ]

  # Output a stamp file to never need to be rebuilt.
  outputs = [ "${webnn_gen_root}/build_ienn.stamp" ]
}

if (webnn_enable_dml) {
  dml_dll = "DirectML.dll"
  os_folder = "x64-win"
  dml_dll_path = "//third_party/microsoft.ai.directml.1.5.1/bin/${os_folder}"
  copy("copy_dml_dll") {
    sources = [ "${dml_dll_path}/${dml_dll}" ]
    outputs = [ "$root_out_dir/{{source_file_part}}" ]
  }
}

if (webnn_enable_onednn) {
  if (is_win) {
    if (is_debug) {
      dnnl_dll_path = "//third_party/oneDNN/build/src/Debug"
    } else {
      dnnl_dll_path = "//third_party/oneDNN/build/src/Release"
    }
    dnnl_dlls = [ "${dnnl_dll_path}/dnnl.dll" ]
  } else if (is_linux) {
    dnnl_dll_path = "//third_party/oneDNN/build/src"
    dnnl_dlls = [
      "${dnnl_dll_path}/libdnnl.so",
      "${dnnl_dll_path}/libdnnl.so.2",
      "${dnnl_dll_path}/libdnnl.so.2.2",
    ]
  }
  copy("copy_dnnl_dll") {
    sources = dnnl_dlls
    outputs = [ "$root_out_dir/{{source_file_part}}" ]
  }
}
